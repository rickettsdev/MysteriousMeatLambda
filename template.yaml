AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  MysteriousMeatLambda

  SAM Template for MysteriousMeatLambda

Globals:
  Function:
    Timeout: 3

Resources:
  LambdaVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "EFS + Lambda on SAM Security Group"
      VpcId: !Ref LambdaVpc
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
  LambdaSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LambdaVpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      CidrBlock: "10.0.0.0/24"
  LambdaSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LambdaVpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      CidrBlock: "10.0.1.0/24"
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LambdaVpc
      Tags:
        - Key: Name
          Value: Private Route Table
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref LambdaVpc
      RouteTableIds:
        - !Ref PrivateRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref LambdaSubnetA
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref LambdaSubnetB
  LambdaFunctionFetchProduct:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnetA
          - !Ref LambdaSubnetB
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /desc
            Method: get
  LambdaFunctionYaYa:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.yaya_lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnetA
          - !Ref LambdaSubnetB
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /yaya
            Method: post
            

Outputs:
  LambdaFunctionFetchProduct:
    Description: "API Gateway endpoint URL for Prod stage for fetch products Lambda function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/desc/"
  LambdaFunctionYaYa:
    Description: "API Gateway endpoint URL for Prod stage for yaya Lambda function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/yaya/"
